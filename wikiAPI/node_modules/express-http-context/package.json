{
  "_from": "express-http-context@^1.0.4",
  "_id": "express-http-context@1.0.4",
  "_inBundle": false,
  "_integrity": "sha512-ppgq9pNf3kLAIFWAmmt9BFdxRCk/3zyEPYPhoA+Z8ikSuHngBagYJa9J8R1GbMme3cK7QzWQRRRrNOt3xUuEZQ==",
  "_location": "/express-http-context",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "express-http-context",
    "fetchSpec": "^1.0.4",
    "name": "express-http-context",
    "raw": "express-http-context@^1.0.4",
    "rawSpec": "^1.0.4",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/express-http-context/-/express-http-context-1.0.4.tgz",
  "_shasum": "186058014e74db921a32976f3e21bc8cd9d5c3d6",
  "_shrinkwrap": null,
  "_spec": "express-http-context@^1.0.4",
  "_where": "C:\\Users\\MariaInes\\Documents\\Universidad\\8Semestre\\Datos2\\wikiAPI",
  "author": {
    "name": "Steve Konves"
  },
  "bugs": {
    "url": "https://github.com/skonves/express-http-context/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Steve Konves"
    },
    {
      "name": "Amiram Korach"
    }
  ],
  "dependencies": {
    "cls-hooked": "^4.2.2"
  },
  "deprecated": false,
  "description": "Get and set request-scoped context anywhere",
  "devDependencies": {
    "chai": "^4.1.2",
    "coveralls": "^3.0.1",
    "express": "^4.16.2",
    "istanbul": "^0.4.5",
    "mocha": "^5.0.1",
    "mocha-lcov-reporter": "^1.3.0",
    "supertest": "^3.0.0"
  },
  "engines": {
    "node": ">=8.0.0 - <10.0.0 || >=10.4.0"
  },
  "homepage": "https://github.com/skonves/express-http-context#readme",
  "keywords": [
    "context",
    "express",
    "http",
    "request"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "express-http-context",
  "optionalDependencies": {},
  "readme": "[![travis](https://img.shields.io/travis/skonves/express-http-context.svg)](https://travis-ci.org/skonves/express-http-context)\n[![coveralls](https://img.shields.io/coveralls/skonves/express-http-context.svg)](https://coveralls.io/github/skonves/express-http-context)\n[![npm](https://img.shields.io/npm/v/express-http-context.svg)](https://www.npmjs.com/package/express-http-context)\n[![npm](https://img.shields.io/npm/dm/express-http-context.svg)](https://www.npmjs.com/package/express-http-context)\n[![david](https://img.shields.io/david/skonves/express-http-context.svg)](https://david-dm.org/skonves/express-http-context)\n\n# Express HTTP Context\nGet and set request-scoped context anywhere.  This is just an unopinionated, idiomatic ExpressJS implementation of [cls-hooked](https://github.com/Jeff-Lewis/cls-hooked) (forked from [continuation-local-storage](https://www.npmjs.com/package/continuation-local-storage)).  It's a great place to store user state, claims from a JWT, request/correlation IDs, and any other request-scoped data. Context is preserved even over async/await (in node 8+).\n\n## How to use it\n\nInstall: `npm install --save express-http-context`  \n(Note: For node v4-7, use the legacy version: `npm install --save express-http-context@<1.0.0`)\n\nUse the middleware immediately before the first middleware that needs to have access to the context.\nYou won't have access to the context in any middleware \"used\" before this one.\n\nNote that some popular middlewares (such as body-parser, express-jwt) may cause context to get lost.\nTo workaround such issues, you are advised to use any third party middleware that does NOT need the context\nBEFORE you use this middleware.\n\n``` js\nvar express = require('express');\nvar httpContext = require('express-http-context');\n\nvar app = express();\n// Use any third party middleware that does not need access to the context here, e.g. \n// app.use(some3rdParty.middleware);\napp.use(httpContext.middleware);\n// all code from here on has access to the same context for each request\n```\n\nSet values based on the incoming request:\n\n``` js\n// Example authorization middleware\napp.use((req, res, next) => {\n\tuserService.getUser(req.get('Authorization'), (err, result) => {\n\t\tif (err) {\n\t\t\tnext(err);\n\t\t} else {\n\t\t\thttpContext.set('user', result.user)\n\t\t\tnext();\n\t\t}\n\t});\n});\n```\n\nGet them from code that doesn't have access to the express `req` object:\n\n``` js\nvar httpContext = require('express-http-context');\n\n// Somewhere deep in the Todo Service\nfunction createTodoItem(title, content, callback) {\n\tvar user = httpContext.get('user');\n\tdb.insert({ title, content, userId: user.id }, callback);\n}\n```\n\n## Troubleshooting\nTo avoid weird behavior with express:\n1. Make sure you require `express-http-context` in the first row of your app. Some popular packages use async which breaks CLS.\n\nFor users of Node 10\n1. Node 10.0.x - 10.3.x are not supported.  V8 version 6.6 introduced a bug that breaks async_hooks during async/await.  Node 10.4.x uses V8 v6.7 in which the bug is fixed.  See: https://github.com/nodejs/node/issues/20274.\n\nSee [Issue #4](https://github.com/skonves/express-http-context/issues/4) for more context.  If you find any other weird behaviors, please feel free to open an issue.\n\n## Contributors\nSteve Konves (@skonves)\nAmiram Korach (@amiram)\nYoni Rabinovitch (@yonirab)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/skonves/express-http-context.git"
  },
  "scripts": {
    "cover": "istanbul cover _mocha index.js -R ./tests --coverage",
    "coveralls": "npm run cover -- --report lcovonly && cat ./coverage/lcov.info | coveralls",
    "test": "mocha ./tests"
  },
  "version": "1.0.4",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": ">=8.0.0 - <10.0.0 || >=10.4.0"
      },
      "pkgid": "express-http-context@1.0.4"
    },
    {
      "code": "ENOTSUP",
      "required": {
        "node": ">=8.0.0 - <10.0.0 || >=10.4.0"
      },
      "pkgid": "express-http-context@1.0.4"
    }
  ]
}
